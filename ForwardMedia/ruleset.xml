<?xml version="1.0"?>
<ruleset name="Forward">
	<description>PHP Coding Standard for FORWARD MEDIA</description>

	<exclude-pattern>*/typo3/sysext/*</exclude-pattern>
	<exclude-pattern>*/typo3conf/ext/crawler/*</exclude-pattern>
	<exclude-pattern>*/typo3conf/ext/direct_mail/*</exclude-pattern>
	<exclude-pattern>*/typo3conf/ext/extension_builder/*</exclude-pattern>
	<exclude-pattern>*/typo3conf/ext/gridelements/*</exclude-pattern>
	<exclude-pattern>*/typo3conf/ext/l10nmgr/*</exclude-pattern>
	<exclude-pattern>*/typo3conf/ext/powermail/*</exclude-pattern>
	<exclude-pattern>*/typo3conf/ext/realurl/*</exclude-pattern>


	<rule ref="SlevomatCodingStandard.Arrays" />


	<rule ref="SlevomatCodingStandard.Commenting">
		<!-- TYPO3 extension builder generates multiline doc-comments -->
		<exclude name="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment" />

		<exclude name="SlevomatCodingStandard.Commenting.DocCommentSpacing" />
	</rule>
	<rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
		<properties>
			<property name="forbiddenAnnotations" type="array">
				<element value="@author" />
				<element value="@copyright" />
				<element value="@license" />
				<element value="@package" />
				<element value="@throws" />
				<element value="@version" />
			</property>
		</properties>
	</rule>


	<rule ref="SlevomatCodingStandard.ControlStructures">
		<exclude name="SlevomatCodingStandard.ControlStructures.ControlStructureSpacing" />
		<exclude name="SlevomatCodingStandard.ControlStructures.DisallowEmpty" />
		<exclude name="SlevomatCodingStandard.ControlStructures.DisallowShortTernaryOperator" />
		<exclude name="SlevomatCodingStandard.ControlStructures.NewWithoutParentheses" />
		<exclude name="SlevomatCodingStandard.ControlStructures.RequireMultiLineTernaryOperator" />
		<exclude name="SlevomatCodingStandard.ControlStructures.RequireYodaComparison" />
	</rule>


	<rule ref="SlevomatCodingStandard.Classes">
		<!-- We use the name suffixes -->
		<exclude name="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming" />
		<exclude name="SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming" />
		<exclude name="SlevomatCodingStandard.Classes.SuperfluousExceptionNaming" />
		<exclude name="SlevomatCodingStandard.Classes.SuperfluousTraitNaming" />

		<!-- This only works in PHP >=7.1 -->
		<exclude name="SlevomatCodingStandard.Classes.ClassConstantVisibility" />
	</rule>


	<rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces">
		<properties>
			<property name="linesCountBeforeClosingBrace" value="0" />
		</properties>
	</rule>


	<rule ref="SlevomatCodingStandard.Exceptions" />


	<rule ref="SlevomatCodingStandard.Functions">
		<exclude name="SlevomatCodingStandard.Functions.StaticClosure" />

		<exclude name="SlevomatCodingStandard.Functions.TrailingCommaInCall" />

		<!-- too many occurences because it does not check overwritten methods -->
		<exclude name="SlevomatCodingStandard.Functions.UnusedParameter" />
	</rule>


	<rule ref="SlevomatCodingStandard.Namespaces">
		<exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation" />
		<exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedExceptions" />
		<exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalConstants" />
		<exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions" />
		<exclude name="SlevomatCodingStandard.Namespaces.UseOnlyWhitelistedNamespaces" />
		<exclude name="SlevomatCodingStandard.Namespaces.UseSpacing" />
	</rule>
	<rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
		<properties>
			<property name="searchAnnotations" value="true" />
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
		<properties>
			<property name="allowFullyQualifiedNameForCollidingClasses" value="true" />
			<property name="allowFullyQualifiedNameForCollidingFunctions" value="true" />
			<property name="allowFullyQualifiedNameForCollidingConstants" value="true" />
			<property name="allowFullyQualifiedGlobalClasses" value="true" />
			<property name="allowFallbackGlobalFunctions" value="true" />
			<property name="allowFallbackGlobalConstants" value="true" />
		</properties>
	</rule>


	<rule ref="SlevomatCodingStandard.Operators.SpreadOperatorSpacing" />


	<rule ref="SlevomatCodingStandard.PHP" />


	<rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints" />
	<rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing" />
	<rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing" />


	<rule ref="SlevomatCodingStandard.Variables">
		<!--
			This Sniff disallows
				$a = 1;
				return $a;
			But two individial statements might make the code easier to understand
		-->
		<exclude name="SlevomatCodingStandard.Variables.UselessVariable" />
	</rule>
	<rule ref="SlevomatCodingStandard.Variables.UnusedVariable">
		<properties>
			<property name="ignoreUnusedValuesWhenOnlyKeysAreUsedInForeach" value="true" />
		</properties>
	</rule>


	<!-- check for usage of undefined variables -->
	<rule ref="VariableAnalysis">
		<!--
			allow unused variables, because the linter currently warns on unused
			function arguments even if later defined arguments are used:
			https://github.com/sirbrillig/phpcs-variable-analysis/issues/21
		-->
		<exclude name="VariableAnalysis.CodeAnalysis.VariableAnalysis.UnusedVariable" />
		<exclude name="VariableAnalysis.CodeAnalysis.VariableAnalysis.StaticOutsideClass" />
	</rule>

	<!-- <rule ref="Generic.Arrays.DisallowLongArraySyntax" /> -->
	<!-- <rule ref="Generic.CodeAnalysis.EmptyStatement" /> -->
	<rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop" />
	<rule ref="Generic.CodeAnalysis.JumbledIncrementer" />
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />
	<rule ref="Generic.CodeAnalysis.UselessOverridingMethod" />

	<!-- <rule ref="Generic.Commenting.DocComment" /> -->
	<rule ref="Generic.Commenting.Fixme" />
	<rule ref="Generic.Commenting.Todo" />

	<rule ref="Generic.ControlStructures.InlineControlStructure" />

	<rule ref="Generic.Files.ByteOrderMark" />
	<!-- <rule ref="Generic.Files.EndFileNewline" /> -->
	<rule ref="Generic.Files.InlineHTML" />
	<rule ref="Generic.Files.LineEndings" />
	<rule ref="Generic.Files.OneClassPerFile" />
	<rule ref="Generic.Files.OneInterfacePerFile" />
	<rule ref="Generic.Files.OneTraitPerFile" />

	<rule ref="Generic.Formatting.DisallowMultipleStatements" />
	<!-- <rule ref="Generic.Formatting.MultipleStatementAlignment" /> -->
	<rule ref="Generic.Formatting.NoSpaceAfterCast" />
	<!-- <rule ref="Generic.Formatting.SpaceAfterCast" /> -->

	<rule ref="Generic.Functions.CallTimePassByReference" />
	<rule ref="Generic.Functions.FunctionCallArgumentSpacing" />
	<rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie" />

	<!-- Many TYPO3 Hooks contain underscores
	<rule ref="Generic.NamingConventions.CamelCapsFunctionName">
		<properties>
			<property name="strict" value="false" />
		</properties>
	</rule> -->
	<rule ref="Generic.NamingConventions.ConstructorName" />
	<rule ref="Generic.NamingConventions.UpperCaseConstantName" />

	<rule ref="Generic.PHP.CharacterBeforePHPOpeningTag" />
	<rule ref="Generic.PHP.DeprecatedFunctions" />
	<rule ref="Generic.PHP.DisallowShortOpenTag" />
	<rule ref="Generic.PHP.ForbiddenFunctions" />
	<!-- <rule ref="Generic.PHP.LowerCaseConstant" /> -->
	<rule ref="Generic.PHP.LowerCaseKeyword" />

	<!-- UnnecessaryStringConcat does not check for newlines -->
	<!-- <rule ref="Generic.Strings.UnnecessaryStringConcat" /> -->

	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent" />
<!-- 	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<property name="tabIndent" value="true" />
		</properties>
	</rule>
 -->

	<rule ref="MySource.Objects.AssignThis" />
	<rule ref="MySource.PHP.EvalObjectFactory" />
	<rule ref="MySource.Strings.JoinStrings" />


	<rule ref="PEAR.ControlStructures.ControlSignature" />
	<rule ref="PEAR.Functions.ValidDefaultValue" />


	<rule ref="PSR1.Classes.ClassDeclaration" />
	<!-- <rule ref="PSR1.Files.SideEffects" /> -->


	<rule ref="PSR2.Namespaces.NamespaceDeclaration" />
	<rule ref="PSR2.Namespaces.UseDeclaration" />


	<rule ref="Zend.Files.ClosingTag" />


	<rule ref="Squiz.Arrays.ArrayBracketSpacing" />

	<rule ref="Squiz.Classes.LowercaseClassKeywords" />
	<rule ref="Squiz.Classes.SelfMemberReference" />

	<rule ref="Squiz.Commenting.DocCommentAlignment" />
	<rule ref="Squiz.Commenting.EmptyCatchComment" />

	<rule ref="Squiz.Scope.StaticThisUsage" />

	<rule ref="Squiz.PHP.Eval" />
	<rule ref="Squiz.PHP.GlobalKeyword" />
	<rule ref="Squiz.PHP.LowercasePHPFunctions" />

	<!-- <rule ref="Squiz.Strings.ConcatenationSpacing">
		<properties>
			<property name="spacing" value="1" />
			<property name="ignoreNewlines" value="1" />
		</properties>
	</rule> -->
	<rule ref="Squiz.Strings.DoubleQuoteUsage" />
	<rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
		<exclude-pattern>*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Strings.EchoedStrings" />

	<rule ref="Squiz.WhiteSpace.LanguageConstructSpacing" />
	<rule ref="Squiz.WhiteSpace.OperatorSpacing">
		<properties>
			<property name="ignoreNewlines" value="1" />
		</properties>
	</rule>
	<rule ref="Squiz.WhiteSpace.SemicolonSpacing" />
</ruleset>